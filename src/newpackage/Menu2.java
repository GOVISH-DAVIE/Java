/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newpackage;

import java.util.Arrays;

/**
 *
 * @author nkotieno
 */
public class Menu2 extends javax.swing.JFrame {

    static String chicken, fruit, green, tomato, noodle, beef, chickens;
    static String b1, b2, b3, s1, s2, s3, so1, so2, so3, so4;
    static String[][] herbs, meat, cheese, veggies;

    /**
     * Creates new form Menu2
     *
     * @param prop
     */
    public Menu2(String[][] herbs,String[][] meat,String[][] cheese,String[][] veggies ) {
        initComponents();
        this.herbs = herbs;
        this.meat = meat;
        this.cheese = cheese;
        this.veggies = veggies; 
        System.out.println(Arrays.deepToString(meat));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        continuemenu2Button = new javax.swing.JButton();
        traditionalbase = new javax.swing.JCheckBox();
        thinbase = new javax.swing.JCheckBox();
        thickbase = new javax.swing.JCheckBox();
        tomatosoup = new javax.swing.JCheckBox();
        tomatosoupBox = new javax.swing.JComboBox<>();
        chickensoup = new javax.swing.JCheckBox();
        chickensoupBox = new javax.swing.JComboBox<>();
        noodlesoup = new javax.swing.JCheckBox();
        noodlesoupBox = new javax.swing.JComboBox<>();
        beefsoup = new javax.swing.JCheckBox();
        beefsoupBox = new javax.swing.JComboBox<>();
        chickensalad = new javax.swing.JCheckBox();
        fruitsalad = new javax.swing.JCheckBox();
        greensalad = new javax.swing.JCheckBox();
        chickensaladBox = new javax.swing.JComboBox<>();
        fruitsaladBox = new javax.swing.JComboBox<>();
        greensaladBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("BASES");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel2.setText("SALADS");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel4.setText("SOUPS");

        continuemenu2Button.setText("Continue ");
        continuemenu2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuemenu2ButtonActionPerformed(evt);
            }
        });

        traditionalbase.setText("Traditonal Base (free)");

        thinbase.setText("Thin Base (free)");

        thickbase.setText("Thick Base (R5)");

        tomatosoup.setText("Tomato soup (R85)");
        tomatosoup.setActionCommand("Tomato soup R25");

        tomatosoupBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " 1", " 2", " 3", " 4" }));
        tomatosoupBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tomatosoupBoxActionPerformed(evt);
            }
        });

        chickensoup.setText("Chicken soup (R85)");

        chickensoupBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));
        chickensoupBox.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                chickensoupBoxInputMethodTextChanged(evt);
            }
        });
        chickensoupBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chickensoupBoxActionPerformed(evt);
            }
        });

        noodlesoup.setText("Noodle Soup (R100)");

        noodlesoupBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " 1", " 2", " 3", " 4" }));

        beefsoup.setText("Beef Soup (R100)");

        beefsoupBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " 1", " 2", " 3", "4" }));

        chickensalad.setText("Chicken salad (R40)");

        fruitsalad.setText("Fruit salad (R55)");

        greensalad.setText("Green salad (R40)");

        chickensaladBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));

        fruitsaladBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));

        greensaladBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", " " }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(continuemenu2Button)
                .addGap(36, 36, 36))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(chickensoup)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(chickensoupBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tomatosoup)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tomatosoupBox, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(noodlesoup)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(noodlesoupBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(beefsoup)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(beefsoupBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(218, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(traditionalbase)
                            .addComponent(thinbase)
                            .addComponent(thickbase)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(chickensalad)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(23, 23, 23)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chickensaladBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fruitsalad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fruitsaladBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(greensalad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(greensaladBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(traditionalbase)
                    .addComponent(chickensalad)
                    .addComponent(chickensaladBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thinbase)
                    .addComponent(fruitsalad)
                    .addComponent(fruitsaladBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greensalad)
                    .addComponent(thickbase)
                    .addComponent(greensaladBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tomatosoup)
                    .addComponent(tomatosoupBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chickensoup)
                    .addComponent(chickensoupBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noodlesoup)
                    .addComponent(noodlesoupBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(beefsoup)
                    .addComponent(beefsoupBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(continuemenu2Button)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static String[] addTO(int n, String arr[], String x) {
        int i;
//create anew array and cast to String
        String[] newarr = new String[n + 1];

        // insert the elements from the old array into the new array 
        // insert all elements till n  
        for (i = 0; i < n; i++) {
            newarr[i] = arr[i];
        }

        newarr[n] = x;

        return newarr;
    }


    private void continuemenu2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continuemenu2ButtonActionPerformed

        //Bases
        String[] bases = {};
        String[] basesPrice = {};
        String[] salads = {};
        String[] saladsCount = {};
        String[] saladsPrice = {};
        String[] soups = {};
        String[] soupsCount = {};
        String[] soupsPrice = {};
        if (traditionalbase.isSelected()) {
            b1 = b1 + traditionalbase.getText() + "\n";
            bases = addTO(bases.length, bases, traditionalbase.getText());
            basesPrice = addTO(basesPrice.length, basesPrice, "0");
        }
        if (thinbase.isSelected()) {
            b2 = b2 + thinbase.getText() + "\n";
            bases = addTO(bases.length, bases, thinbase.getText());
            basesPrice = addTO(basesPrice.length, basesPrice, "0");

        }
        if (thickbase.isSelected()) {
            b3 = b3 + thickbase.getText() + "\n";
            bases = addTO(bases.length, bases, thickbase.getText());
            basesPrice = addTO(basesPrice.length, basesPrice, "5");

        }//else (traditionalbase.isSelected()== false){

        //Salads
        if (chickensalad.isSelected()) {
            s1 = s1 + chickensalad.getText() + "\n";
            salads = addTO(salads.length, salads,
                    chickensalad.getText());
            chicken = (String) chickensaladBox.getSelectedItem();

            saladsCount = addTO(saladsCount.length,
                    saladsCount, chicken);
            saladsPrice = addTO(saladsPrice.length,
                    saladsPrice, "40");
            

        }
        if (fruitsalad.isSelected()) {
            s2 = s2 + fruitsalad.getText() + "\n";
            salads = addTO(salads.length, salads,
                    fruitsalad.getText());
            fruit = (String) fruitsaladBox.getSelectedItem();
            saladsCount = addTO(saladsCount.length,
                    saladsCount, fruit);
            saladsPrice = addTO(saladsPrice.length,
                    saladsPrice, "55");

        }
        if (greensalad.isSelected()) {
            s3 = s3 + greensalad.getText() + "\n";
            salads = addTO(salads.length, salads,
                    greensalad.getText());

            green = (String) greensaladBox.getSelectedItem();
           saladsPrice = addTO(saladsPrice.length,
                    saladsPrice, "40");
        }

        //Soups
        if (tomatosoup.isSelected()) {
            tomato = (String) tomatosoupBox.getSelectedItem();
            soups = addTO(soups.length, soups,
                    tomatosoup.getText());
            so1 = so1 + tomatosoup.getText() + "\n";
            soupsCount = addTO(soupsCount.length,
                    soupsCount, tomato);
            soupsPrice = addTO(soupsPrice.length,
                    soupsPrice, "85");

        }
        if (chickensoup.isSelected()) {
            so2 = so2 + chickensoup.getText() + "\n";
            soups = addTO(soups.length, soups,
                    chickensoup.getText());
            chickens = (String) chickensoupBox.getSelectedItem();
            soupsCount = addTO(soupsCount.length,
                    soupsCount, chickens);
             soupsPrice = addTO(soupsPrice.length,
                    soupsPrice, "85");
        }
        if (noodlesoup.isSelected()) {
            so3 = so3 + noodlesoup.getText() + "\n";
            soups = addTO(soups.length, soups,
                    noodlesoup.getText());
            noodle = (String) noodlesoupBox.getSelectedItem();
            soupsCount = addTO(soupsCount.length,
                    soupsCount, noodle);
             soupsPrice = addTO(soupsPrice.length,
                    soupsPrice, "100");
        }
        if (beefsoup.isSelected()) {
            so4 = so4 + beefsoup.getText() + "\n";
            soups = addTO(soups.length, soups,
                    beefsoup.getText());
            beef = (String) beefsoupBox.getSelectedItem();
            soupsCount = addTO(soupsCount.length,
                    soupsCount, beef);
             soupsPrice = addTO(soupsPrice.length,
                    soupsPrice, "100");
        }
        String[][] soupFin = {
            soups,
            soupsCount,
            soupsPrice

        };
        String[][] saladsFin = {
            salads,
            saladsCount,
            saladsPrice
                

        };
        String[] baseCount = new String[bases.length];;
        for (int i = 0; i < bases.length; i++) {
            baseCount[i] = "1";
        }

        String[][] basesFin = {
            bases,
            baseCount,
            basesPrice

        };

        String[][][] x = {soupFin, saladsFin, basesFin};
        System.out.println("food");
        System.out.println(Arrays.deepToString(x));
        new Menu3(x,this.herbs, this.meat, this.cheese, this.veggies ).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_continuemenu2ButtonActionPerformed

    private void tomatosoupBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tomatosoupBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tomatosoupBoxActionPerformed

    private void chickensoupBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chickensoupBoxActionPerformed
        // TODO add your handling code here:'

    }//GEN-LAST:event_chickensoupBoxActionPerformed

    private void chickensoupBoxInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_chickensoupBoxInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_chickensoupBoxInputMethodTextChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu2(herbs, meat, cheese, veggies).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox beefsoup;
    private javax.swing.JComboBox<String> beefsoupBox;
    private javax.swing.JCheckBox chickensalad;
    private javax.swing.JComboBox<String> chickensaladBox;
    private javax.swing.JCheckBox chickensoup;
    private javax.swing.JComboBox<String> chickensoupBox;
    private javax.swing.JButton continuemenu2Button;
    private javax.swing.JCheckBox fruitsalad;
    private javax.swing.JComboBox<String> fruitsaladBox;
    private javax.swing.JCheckBox greensalad;
    private javax.swing.JComboBox<String> greensaladBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox noodlesoup;
    private javax.swing.JComboBox<String> noodlesoupBox;
    private javax.swing.JCheckBox thickbase;
    private javax.swing.JCheckBox thinbase;
    private javax.swing.JCheckBox tomatosoup;
    private javax.swing.JComboBox<String> tomatosoupBox;
    private javax.swing.JCheckBox traditionalbase;
    // End of variables declaration//GEN-END:variables
}
